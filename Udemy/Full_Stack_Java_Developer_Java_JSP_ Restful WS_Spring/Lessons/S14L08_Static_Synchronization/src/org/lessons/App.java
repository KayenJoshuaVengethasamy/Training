package org.lessons;
//whenever we use the synchronized keyword, java applies a locking mechanism inbetween

//if we have two objects, however, it will produce unexpected results as java will apply a lock for each object
//because of this, the multithreading will work, which will result in inconsistencies
//one solution to this issue is to make use of single objects
//this is not always possible as there could be scenarios where making use of single objects is not possible
//such as with a parameterized constructor
//this will again cause some inconsistencies with the data
//To resolve this issue, we can make use of static synchronization
//a static element is an element which is independent and separated in memory, they do not derive from object
//when dealing with static elements, we need to handle the situation based on static elements, therefore we will not use objects
//whenever we mark a static element as synchronized, then the lock will be based on the class directly

class Brakets {
	synchronized public static void generate(String threadCode) {
		for (int i = 1; i <= 10; i++) {
			if (i <= 5) {
				System.out.print("[");
			} else {
				System.out.print("]");
			}
		}
		System.out.println("Generated by thread : " + threadCode);
	}
}

public class App {
	public static void main(String[] args) {

		new Thread(new Runnable() {
			@Override
			public void run() {
				for (int i = 1; i <= 5; i++) {
					Brakets.generate("Thread 1");
				}
			}
		}).start();

		new Thread(new Runnable() {
			@Override
			public void run() {
				for (int i = 1; i <= 5; i++) {
					Brakets.generate("Thread 2");
				}
			}
		}).start();
	}

}
